package main

import (
	"encoding/base64"
	"fmt"
)

func main() {
	stdout_dec, _ := base64.StdEncoding.DecodeString(stdout_enc)
	fmt.Print(string(stdout_dec))
}

const stdout_enc = `
U2luayAjNTIKCVN0YXRlOiBTVVNQRU5ERUQKCU5hbWU6IGFsc2Ffb3V0cHV0LnBjaS0wMDAwXzAw
XzFmLjMtcGxhdGZvcm0tc2tsX2hkYV9kc3BfZ2VuZXJpYy5IaUZpX19od19zb2ZoZGFkc3BfNV9f
c2luawoJRGVzY3JpcHRpb246IENvbWV0IExha2UgUENIIGNBVlMgSERNSSAvIERpc3BsYXlQb3J0
IDMgT3V0cHV0CglEcml2ZXI6IFBpcGVXaXJlCglTYW1wbGUgU3BlY2lmaWNhdGlvbjogczI0LTMy
bGUgMmNoIDQ4MDAwSHoKCUNoYW5uZWwgTWFwOiBmcm9udC1sZWZ0LGZyb250LXJpZ2h0CglPd25l
ciBNb2R1bGU6IDQyOTQ5NjcyOTUKCU11dGU6IG5vCglWb2x1bWU6IGZyb250LWxlZnQ6IDY1NTM2
IC8gMTAwJSAvIDAuMDAgZEIsICAgZnJvbnQtcmlnaHQ6IDY1NTM2IC8gMTAwJSAvIDAuMDAgZEIK
CSAgICAgICAgYmFsYW5jZSAwLjAwCglCYXNlIFZvbHVtZTogNjU1MzYgLyAxMDAlIC8gMC4wMCBk
QgoJTW9uaXRvciBTb3VyY2U6IGFsc2Ffb3V0cHV0LnBjaS0wMDAwXzAwXzFmLjMtcGxhdGZvcm0t
c2tsX2hkYV9kc3BfZ2VuZXJpYy5IaUZpX19od19zb2ZoZGFkc3BfNV9fc2luay5tb25pdG9yCglM
YXRlbmN5OiAwIHVzZWMsIGNvbmZpZ3VyZWQgMCB1c2VjCglGbGFnczogSEFSRFdBUkUgREVDSUJF
TF9WT0xVTUUgTEFURU5DWSAKCVByb3BlcnRpZXM6CgkJb2JqZWN0LnBhdGggPSAiYWxzYTpwY206
MTpodzpzb2ZoZGFkc3AsNTpwbGF5YmFjayIKCQlhcGkuYWxzYS5wYXRoID0gImh3OnNvZmhkYWRz
cCw1IgoJCWFwaS5hbHNhLm9wZW4udWNtID0gInRydWUiCgkJYXBpLmFsc2EucGNtLmNhcmQgPSAi
MSIKCQlhcGkuYWxzYS5wY20uc3RyZWFtID0gInBsYXliYWNrIgoJCWF1ZGlvLmNoYW5uZWxzID0g
IjIiCgkJYXVkaW8ucG9zaXRpb24gPSAiRkwsRlIiCgkJZGV2aWNlLnJvdXRlcyA9ICIxIgoJCWFs
c2EubWl4ZXJfZGV2aWNlID0gIl91Y20wMDA1Lmh3OnNvZmhkYWRzcCIKCQlhbHNhLnJlc29sdXRp
b25fYml0cyA9ICIxNiIKCQlkZXZpY2UuYXBpID0gImFsc2EiCgkJZGV2aWNlLmNsYXNzID0gInNv
dW5kIgoJCWFsc2EuY2xhc3MgPSAiZ2VuZXJpYyIKCQlhbHNhLnN1YmNsYXNzID0gImdlbmVyaWMt
bWl4IgoJCWFsc2EubmFtZSA9ICIiCgkJYWxzYS5pZCA9ICJIRE1JMyAoKikiCgkJYWxzYS5zdWJk
ZXZpY2UgPSAiMCIKCQlhbHNhLnN1YmRldmljZV9uYW1lID0gInN1YmRldmljZSAjMCIKCQlhbHNh
LmRldmljZSA9ICI1IgoJCWFsc2EuY2FyZCA9ICIxIgoJCWFsc2EuY2FyZF9uYW1lID0gInNvZi1o
ZGEtZHNwIgoJCWFsc2EubG9uZ19jYXJkX25hbWUgPSAiSFAtSFBaQm9va1N0dWRpb0c3TW9iaWxl
V29ya3N0YXRpb24tLTg3MzYiCgkJYWxzYS5kcml2ZXJfbmFtZSA9ICJzbmRfc29jX3NrbF9oZGFf
ZHNwIgoJCWRldmljZS5wcm9maWxlLm5hbWUgPSAiSGlGaTogaHc6c29maGRhZHNwLDU6IHNpbmsi
CgkJZGV2aWNlLnByb2ZpbGUuZGVzY3JpcHRpb24gPSAiSERNSSAvIERpc3BsYXlQb3J0IDMgT3V0
cHV0IgoJCWNhcmQucHJvZmlsZS5kZXZpY2UgPSAiMCIKCQlkZXZpY2UuaWQgPSAiNDUiCgkJZmFj
dG9yeS5uYW1lID0gImFwaS5hbHNhLnBjbS5zaW5rIgoJCXByaW9yaXR5LmRyaXZlciA9ICI2MDAi
CgkJcHJpb3JpdHkuc2Vzc2lvbiA9ICI2MDAiCgkJbWVkaWEuY2xhc3MgPSAiQXVkaW8vU2luayIK
CQlub2RlLm5pY2sgPSAic29mLWhkYS1kc3AiCgkJbm9kZS5uYW1lID0gImFsc2Ffb3V0cHV0LnBj
aS0wMDAwXzAwXzFmLjMtcGxhdGZvcm0tc2tsX2hkYV9kc3BfZ2VuZXJpYy5IaUZpX19od19zb2Zo
ZGFkc3BfNV9fc2luayIKCQlkZXZpY2UuZGVzY3JpcHRpb24gPSAiQ29tZXQgTGFrZSBQQ0ggY0FW
UyBIRE1JIC8gRGlzcGxheVBvcnQgMyBPdXRwdXQiCgkJZGV2aWNlLmljb25fbmFtZSA9ICJhdWRp
by1jYXJkIgoJCWRldmljZS5idXMgPSAicGNpIgoJCWRldmljZS5idXNfcGF0aCA9ICJwY2ktMDAw
MDowMDoxZi4zLXBsYXRmb3JtLXNrbF9oZGFfZHNwX2dlbmVyaWMiCgkJbm9kZS5wYXVzZS1vbi1p
ZGxlID0gImZhbHNlIgoJCWZhY3RvcnkuaWQgPSAiMTgiCgkJY2xpZW50LmlkID0gIjMyIgoJCW5v
ZGUuZHJpdmVyID0gInRydWUiCgkJZmFjdG9yeS5tb2RlID0gIm1lcmdlIgoJCWF1ZGlvLmFkYXB0
LmZvbGxvd2VyID0gIiIKCQlsaWJyYXJ5Lm5hbWUgPSAiYXVkaW9jb252ZXJ0L2xpYnNwYS1hdWRp
b2NvbnZlcnQiCgkJb2JqZWN0LmlkID0gIjUyIgoJCW5vZGUubWF4LWxhdGVuY3kgPSAiMjA0OC80
ODAwMCIKCVBvcnRzOgoJCVtPdXRdIEhETUkzOiBIRE1JIC8gRGlzcGxheVBvcnQgMyBPdXRwdXQg
KHR5cGU6IEhETUksIHByaW9yaXR5OiA3MDAsIGF2YWlsYWJpbGl0eSBncm91cDogSERNSS9EUCxw
Y209NSwgbm90IGF2YWlsYWJsZSkKCUFjdGl2ZSBQb3J0OiBbT3V0XSBIRE1JMwoJRm9ybWF0czoK
CQlwY20KClNpbmsgIzUzCglTdGF0ZTogU1VTUEVOREVECglOYW1lOiBhbHNhX291dHB1dC5wY2kt
MDAwMF8wMF8xZi4zLXBsYXRmb3JtLXNrbF9oZGFfZHNwX2dlbmVyaWMuSGlGaV9faHdfc29maGRh
ZHNwXzRfX3NpbmsKCURlc2NyaXB0aW9uOiBDb21ldCBMYWtlIFBDSCBjQVZTIEhETUkgLyBEaXNw
bGF5UG9ydCAyIE91dHB1dAoJRHJpdmVyOiBQaXBlV2lyZQoJU2FtcGxlIFNwZWNpZmljYXRpb246
IHMyNC0zMmxlIDJjaCA0ODAwMEh6CglDaGFubmVsIE1hcDogZnJvbnQtbGVmdCxmcm9udC1yaWdo
dAoJT3duZXIgTW9kdWxlOiA0Mjk0OTY3Mjk1CglNdXRlOiBubwoJVm9sdW1lOiBmcm9udC1sZWZ0
OiA2NTUzNiAvIDEwMCUgLyAwLjAwIGRCLCAgIGZyb250LXJpZ2h0OiA2NTUzNiAvIDEwMCUgLyAw
LjAwIGRCCgkgICAgICAgIGJhbGFuY2UgMC4wMAoJQmFzZSBWb2x1bWU6IDY1NTM2IC8gMTAwJSAv
IDAuMDAgZEIKCU1vbml0b3IgU291cmNlOiBhbHNhX291dHB1dC5wY2ktMDAwMF8wMF8xZi4zLXBs
YXRmb3JtLXNrbF9oZGFfZHNwX2dlbmVyaWMuSGlGaV9faHdfc29maGRhZHNwXzRfX3NpbmsubW9u
aXRvcgoJTGF0ZW5jeTogMCB1c2VjLCBjb25maWd1cmVkIDAgdXNlYwoJRmxhZ3M6IEhBUkRXQVJF
IERFQ0lCRUxfVk9MVU1FIExBVEVOQ1kgCglQcm9wZXJ0aWVzOgoJCW9iamVjdC5wYXRoID0gImFs
c2E6cGNtOjE6aHc6c29maGRhZHNwLDQ6cGxheWJhY2siCgkJYXBpLmFsc2EucGF0aCA9ICJodzpz
b2ZoZGFkc3AsNCIKCQlhcGkuYWxzYS5vcGVuLnVjbSA9ICJ0cnVlIgoJCWFwaS5hbHNhLnBjbS5j
YXJkID0gIjEiCgkJYXBpLmFsc2EucGNtLnN0cmVhbSA9ICJwbGF5YmFjayIKCQlhdWRpby5jaGFu
bmVscyA9ICIyIgoJCWF1ZGlvLnBvc2l0aW9uID0gIkZMLEZSIgoJCWRldmljZS5yb3V0ZXMgPSAi
MSIKCQlhbHNhLm1peGVyX2RldmljZSA9ICJfdWNtMDAwNS5odzpzb2ZoZGFkc3AiCgkJYWxzYS5y
ZXNvbHV0aW9uX2JpdHMgPSAiMTYiCgkJZGV2aWNlLmFwaSA9ICJhbHNhIgoJCWRldmljZS5jbGFz
cyA9ICJzb3VuZCIKCQlhbHNhLmNsYXNzID0gImdlbmVyaWMiCgkJYWxzYS5zdWJjbGFzcyA9ICJn
ZW5lcmljLW1peCIKCQlhbHNhLm5hbWUgPSAiIgoJCWFsc2EuaWQgPSAiSERNSTIgKCopIgoJCWFs
c2Euc3ViZGV2aWNlID0gIjAiCgkJYWxzYS5zdWJkZXZpY2VfbmFtZSA9ICJzdWJkZXZpY2UgIzAi
CgkJYWxzYS5kZXZpY2UgPSAiNCIKCQlhbHNhLmNhcmQgPSAiMSIKCQlhbHNhLmNhcmRfbmFtZSA9
ICJzb2YtaGRhLWRzcCIKCQlhbHNhLmxvbmdfY2FyZF9uYW1lID0gIkhQLUhQWkJvb2tTdHVkaW9H
N01vYmlsZVdvcmtzdGF0aW9uLS04NzM2IgoJCWFsc2EuZHJpdmVyX25hbWUgPSAic25kX3NvY19z
a2xfaGRhX2RzcCIKCQlkZXZpY2UucHJvZmlsZS5uYW1lID0gIkhpRmk6IGh3OnNvZmhkYWRzcCw0
OiBzaW5rIgoJCWRldmljZS5wcm9maWxlLmRlc2NyaXB0aW9uID0gIkhETUkgLyBEaXNwbGF5UG9y
dCAyIE91dHB1dCIKCQljYXJkLnByb2ZpbGUuZGV2aWNlID0gIjEiCgkJZGV2aWNlLmlkID0gIjQ1
IgoJCWZhY3RvcnkubmFtZSA9ICJhcGkuYWxzYS5wY20uc2luayIKCQlwcmlvcml0eS5kcml2ZXIg
PSAiNjE2IgoJCXByaW9yaXR5LnNlc3Npb24gPSAiNjE2IgoJCW1lZGlhLmNsYXNzID0gIkF1ZGlv
L1NpbmsiCgkJbm9kZS5uaWNrID0gInNvZi1oZGEtZHNwIgoJCW5vZGUubmFtZSA9ICJhbHNhX291
dHB1dC5wY2ktMDAwMF8wMF8xZi4zLXBsYXRmb3JtLXNrbF9oZGFfZHNwX2dlbmVyaWMuSGlGaV9f
aHdfc29maGRhZHNwXzRfX3NpbmsiCgkJZGV2aWNlLmRlc2NyaXB0aW9uID0gIkNvbWV0IExha2Ug
UENIIGNBVlMgSERNSSAvIERpc3BsYXlQb3J0IDIgT3V0cHV0IgoJCWRldmljZS5pY29uX25hbWUg
PSAiYXVkaW8tY2FyZCIKCQlkZXZpY2UuYnVzID0gInBjaSIKCQlkZXZpY2UuYnVzX3BhdGggPSAi
cGNpLTAwMDA6MDA6MWYuMy1wbGF0Zm9ybS1za2xfaGRhX2RzcF9nZW5lcmljIgoJCW5vZGUucGF1
c2Utb24taWRsZSA9ICJmYWxzZSIKCQlmYWN0b3J5LmlkID0gIjE4IgoJCWNsaWVudC5pZCA9ICIz
MiIKCQlub2RlLmRyaXZlciA9ICJ0cnVlIgoJCWZhY3RvcnkubW9kZSA9ICJtZXJnZSIKCQlhdWRp
by5hZGFwdC5mb2xsb3dlciA9ICIiCgkJbGlicmFyeS5uYW1lID0gImF1ZGlvY29udmVydC9saWJz
cGEtYXVkaW9jb252ZXJ0IgoJCW9iamVjdC5pZCA9ICI1MyIKCQlub2RlLm1heC1sYXRlbmN5ID0g
IjIwNDgvNDgwMDAiCglQb3J0czoKCQlbT3V0XSBIRE1JMjogSERNSSAvIERpc3BsYXlQb3J0IDIg
T3V0cHV0ICh0eXBlOiBIRE1JLCBwcmlvcml0eTogNjAwLCBhdmFpbGFiaWxpdHkgZ3JvdXA6IEhE
TUkvRFAscGNtPTQsIG5vdCBhdmFpbGFibGUpCglBY3RpdmUgUG9ydDogW091dF0gSERNSTIKCUZv
cm1hdHM6CgkJcGNtCgpTaW5rICM1NAoJU3RhdGU6IFNVU1BFTkRFRAoJTmFtZTogYWxzYV9vdXRw
dXQucGNpLTAwMDBfMDBfMWYuMy1wbGF0Zm9ybS1za2xfaGRhX2RzcF9nZW5lcmljLkhpRmlfX2h3
X3NvZmhkYWRzcF8zX19zaW5rCglEZXNjcmlwdGlvbjogQ29tZXQgTGFrZSBQQ0ggY0FWUyBIRE1J
IC8gRGlzcGxheVBvcnQgMSBPdXRwdXQKCURyaXZlcjogUGlwZVdpcmUKCVNhbXBsZSBTcGVjaWZp
Y2F0aW9uOiBzMjQtMzJsZSAyY2ggNDgwMDBIegoJQ2hhbm5lbCBNYXA6IGZyb250LWxlZnQsZnJv
bnQtcmlnaHQKCU93bmVyIE1vZHVsZTogNDI5NDk2NzI5NQoJTXV0ZTogbm8KCVZvbHVtZTogZnJv
bnQtbGVmdDogNjU1MzYgLyAxMDAlIC8gMC4wMCBkQiwgICBmcm9udC1yaWdodDogNjU1MzYgLyAx
MDAlIC8gMC4wMCBkQgoJICAgICAgICBiYWxhbmNlIDAuMDAKCUJhc2UgVm9sdW1lOiA2NTUzNiAv
IDEwMCUgLyAwLjAwIGRCCglNb25pdG9yIFNvdXJjZTogYWxzYV9vdXRwdXQucGNpLTAwMDBfMDBf
MWYuMy1wbGF0Zm9ybS1za2xfaGRhX2RzcF9nZW5lcmljLkhpRmlfX2h3X3NvZmhkYWRzcF8zX19z
aW5rLm1vbml0b3IKCUxhdGVuY3k6IDAgdXNlYywgY29uZmlndXJlZCAwIHVzZWMKCUZsYWdzOiBI
QVJEV0FSRSBERUNJQkVMX1ZPTFVNRSBMQVRFTkNZIAoJUHJvcGVydGllczoKCQlvYmplY3QucGF0
aCA9ICJhbHNhOnBjbToxOmh3OnNvZmhkYWRzcCwzOnBsYXliYWNrIgoJCWFwaS5hbHNhLnBhdGgg
PSAiaHc6c29maGRhZHNwLDMiCgkJYXBpLmFsc2Eub3Blbi51Y20gPSAidHJ1ZSIKCQlhcGkuYWxz
YS5wY20uY2FyZCA9ICIxIgoJCWFwaS5hbHNhLnBjbS5zdHJlYW0gPSAicGxheWJhY2siCgkJYXVk
aW8uY2hhbm5lbHMgPSAiMiIKCQlhdWRpby5wb3NpdGlvbiA9ICJGTCxGUiIKCQlkZXZpY2Uucm91
dGVzID0gIjEiCgkJYWxzYS5taXhlcl9kZXZpY2UgPSAiX3VjbTAwMDUuaHc6c29maGRhZHNwIgoJ
CWFsc2EucmVzb2x1dGlvbl9iaXRzID0gIjE2IgoJCWRldmljZS5hcGkgPSAiYWxzYSIKCQlkZXZp
Y2UuY2xhc3MgPSAic291bmQiCgkJYWxzYS5jbGFzcyA9ICJnZW5lcmljIgoJCWFsc2Euc3ViY2xh
c3MgPSAiZ2VuZXJpYy1taXgiCgkJYWxzYS5uYW1lID0gIiIKCQlhbHNhLmlkID0gIkhETUkxICgq
KSIKCQlhbHNhLnN1YmRldmljZSA9ICIwIgoJCWFsc2Euc3ViZGV2aWNlX25hbWUgPSAic3ViZGV2
aWNlICMwIgoJCWFsc2EuZGV2aWNlID0gIjMiCgkJYWxzYS5jYXJkID0gIjEiCgkJYWxzYS5jYXJk
X25hbWUgPSAic29mLWhkYS1kc3AiCgkJYWxzYS5sb25nX2NhcmRfbmFtZSA9ICJIUC1IUFpCb29r
U3R1ZGlvRzdNb2JpbGVXb3Jrc3RhdGlvbi0tODczNiIKCQlhbHNhLmRyaXZlcl9uYW1lID0gInNu
ZF9zb2Nfc2tsX2hkYV9kc3AiCgkJZGV2aWNlLnByb2ZpbGUubmFtZSA9ICJIaUZpOiBodzpzb2Zo
ZGFkc3AsMzogc2luayIKCQlkZXZpY2UucHJvZmlsZS5kZXNjcmlwdGlvbiA9ICJIRE1JIC8gRGlz
cGxheVBvcnQgMSBPdXRwdXQiCgkJY2FyZC5wcm9maWxlLmRldmljZSA9ICIyIgoJCWRldmljZS5p
ZCA9ICI0NSIKCQlmYWN0b3J5Lm5hbWUgPSAiYXBpLmFsc2EucGNtLnNpbmsiCgkJcHJpb3JpdHku
ZHJpdmVyID0gIjYzMiIKCQlwcmlvcml0eS5zZXNzaW9uID0gIjYzMiIKCQltZWRpYS5jbGFzcyA9
ICJBdWRpby9TaW5rIgoJCW5vZGUubmljayA9ICJzb2YtaGRhLWRzcCIKCQlub2RlLm5hbWUgPSAi
YWxzYV9vdXRwdXQucGNpLTAwMDBfMDBfMWYuMy1wbGF0Zm9ybS1za2xfaGRhX2RzcF9nZW5lcmlj
LkhpRmlfX2h3X3NvZmhkYWRzcF8zX19zaW5rIgoJCWRldmljZS5kZXNjcmlwdGlvbiA9ICJDb21l
dCBMYWtlIFBDSCBjQVZTIEhETUkgLyBEaXNwbGF5UG9ydCAxIE91dHB1dCIKCQlkZXZpY2UuaWNv
bl9uYW1lID0gImF1ZGlvLWNhcmQiCgkJZGV2aWNlLmJ1cyA9ICJwY2kiCgkJZGV2aWNlLmJ1c19w
YXRoID0gInBjaS0wMDAwOjAwOjFmLjMtcGxhdGZvcm0tc2tsX2hkYV9kc3BfZ2VuZXJpYyIKCQlu
b2RlLnBhdXNlLW9uLWlkbGUgPSAiZmFsc2UiCgkJZmFjdG9yeS5pZCA9ICIxOCIKCQljbGllbnQu
aWQgPSAiMzIiCgkJbm9kZS5kcml2ZXIgPSAidHJ1ZSIKCQlmYWN0b3J5Lm1vZGUgPSAibWVyZ2Ui
CgkJYXVkaW8uYWRhcHQuZm9sbG93ZXIgPSAiIgoJCWxpYnJhcnkubmFtZSA9ICJhdWRpb2NvbnZl
cnQvbGlic3BhLWF1ZGlvY29udmVydCIKCQlvYmplY3QuaWQgPSAiNTQiCgkJbm9kZS5tYXgtbGF0
ZW5jeSA9ICIyMDQ4LzQ4MDAwIgoJUG9ydHM6CgkJW091dF0gSERNSTE6IEhETUkgLyBEaXNwbGF5
UG9ydCAxIE91dHB1dCAodHlwZTogSERNSSwgcHJpb3JpdHk6IDUwMCwgYXZhaWxhYmlsaXR5IGdy
b3VwOiBIRE1JL0RQLHBjbT0zLCBub3QgYXZhaWxhYmxlKQoJQWN0aXZlIFBvcnQ6IFtPdXRdIEhE
TUkxCglGb3JtYXRzOgoJCXBjbQoKU2luayAjNTUKCVN0YXRlOiBSVU5OSU5HCglOYW1lOiBhbHNh
X291dHB1dC5wY2ktMDAwMF8wMF8xZi4zLXBsYXRmb3JtLXNrbF9oZGFfZHNwX2dlbmVyaWMuSGlG
aV9faHdfc29maGRhZHNwX19zaW5rCglEZXNjcmlwdGlvbjogQ29tZXQgTGFrZSBQQ0ggY0FWUyBT
cGVha2VyICsgSGVhZHBob25lcwoJRHJpdmVyOiBQaXBlV2lyZQoJU2FtcGxlIFNwZWNpZmljYXRp
b246IHMyNC0zMmxlIDJjaCA0ODAwMEh6CglDaGFubmVsIE1hcDogZnJvbnQtbGVmdCxmcm9udC1y
aWdodAoJT3duZXIgTW9kdWxlOiA0Mjk0OTY3Mjk1CglNdXRlOiBubwoJVm9sdW1lOiBmcm9udC1s
ZWZ0OiAyMTYyNiAvICAzMyUgLyAtMjguODkgZEIsICAgZnJvbnQtcmlnaHQ6IDIxNjI2IC8gIDMz
JSAvIC0yOC44OSBkQgoJICAgICAgICBiYWxhbmNlIDAuMDAKCUJhc2UgVm9sdW1lOiA2NTUzNiAv
IDEwMCUgLyAwLjAwIGRCCglNb25pdG9yIFNvdXJjZTogYWxzYV9vdXRwdXQucGNpLTAwMDBfMDBf
MWYuMy1wbGF0Zm9ybS1za2xfaGRhX2RzcF9nZW5lcmljLkhpRmlfX2h3X3NvZmhkYWRzcF9fc2lu
ay5tb25pdG9yCglMYXRlbmN5OiAwIHVzZWMsIGNvbmZpZ3VyZWQgMCB1c2VjCglGbGFnczogSEFS
RFdBUkUgSFdfTVVURV9DVFJMIEhXX1ZPTFVNRV9DVFJMIERFQ0lCRUxfVk9MVU1FIExBVEVOQ1kg
CglQcm9wZXJ0aWVzOgoJCW9iamVjdC5wYXRoID0gImFsc2E6cGNtOjE6aHc6c29maGRhZHNwOnBs
YXliYWNrIgoJCWFwaS5hbHNhLnBhdGggPSAiaHc6c29maGRhZHNwIgoJCWFwaS5hbHNhLm9wZW4u
dWNtID0gInRydWUiCgkJYXBpLmFsc2EucGNtLmNhcmQgPSAiMSIKCQlhcGkuYWxzYS5wY20uc3Ry
ZWFtID0gInBsYXliYWNrIgoJCWF1ZGlvLmNoYW5uZWxzID0gIjIiCgkJYXVkaW8ucG9zaXRpb24g
PSAiRkwsRlIiCgkJZGV2aWNlLnJvdXRlcyA9ICIyIgoJCWFsc2EubWl4ZXJfZGV2aWNlID0gIl91
Y20wMDA1Lmh3OnNvZmhkYWRzcCIKCQlhbHNhLnJlc29sdXRpb25fYml0cyA9ICIxNiIKCQlkZXZp
Y2UuYXBpID0gImFsc2EiCgkJZGV2aWNlLmNsYXNzID0gInNvdW5kIgoJCWFsc2EuY2xhc3MgPSAi
Z2VuZXJpYyIKCQlhbHNhLnN1YmNsYXNzID0gImdlbmVyaWMtbWl4IgoJCWFsc2EubmFtZSA9ICIi
CgkJYWxzYS5pZCA9ICJIREEgQW5hbG9nICgqKSIKCQlhbHNhLnN1YmRldmljZSA9ICIwIgoJCWFs
c2Euc3ViZGV2aWNlX25hbWUgPSAic3ViZGV2aWNlICMwIgoJCWFsc2EuZGV2aWNlID0gIjAiCgkJ
YWxzYS5jYXJkID0gIjEiCgkJYWxzYS5jYXJkX25hbWUgPSAic29mLWhkYS1kc3AiCgkJYWxzYS5s
b25nX2NhcmRfbmFtZSA9ICJIUC1IUFpCb29rU3R1ZGlvRzdNb2JpbGVXb3Jrc3RhdGlvbi0tODcz
NiIKCQlhbHNhLmRyaXZlcl9uYW1lID0gInNuZF9zb2Nfc2tsX2hkYV9kc3AiCgkJZGV2aWNlLnBy
b2ZpbGUubmFtZSA9ICJIaUZpOiBodzpzb2ZoZGFkc3A6IHNpbmsiCgkJZGV2aWNlLnByb2ZpbGUu
ZGVzY3JpcHRpb24gPSAiU3BlYWtlciArIEhlYWRwaG9uZXMiCgkJY2FyZC5wcm9maWxlLmRldmlj
ZSA9ICIzIgoJCWRldmljZS5pZCA9ICI0NSIKCQlmYWN0b3J5Lm5hbWUgPSAiYXBpLmFsc2EucGNt
LnNpbmsiCgkJcHJpb3JpdHkuZHJpdmVyID0gIjY4MCIKCQlwcmlvcml0eS5zZXNzaW9uID0gIjY4
MCIKCQltZWRpYS5jbGFzcyA9ICJBdWRpby9TaW5rIgoJCW5vZGUubmljayA9ICJzb2YtaGRhLWRz
cCIKCQlub2RlLm5hbWUgPSAiYWxzYV9vdXRwdXQucGNpLTAwMDBfMDBfMWYuMy1wbGF0Zm9ybS1z
a2xfaGRhX2RzcF9nZW5lcmljLkhpRmlfX2h3X3NvZmhkYWRzcF9fc2luayIKCQlkZXZpY2UuZGVz
Y3JpcHRpb24gPSAiQ29tZXQgTGFrZSBQQ0ggY0FWUyBTcGVha2VyICsgSGVhZHBob25lcyIKCQlk
ZXZpY2UuaWNvbl9uYW1lID0gImF1ZGlvLWNhcmQiCgkJZGV2aWNlLmJ1cyA9ICJwY2kiCgkJZGV2
aWNlLmJ1c19wYXRoID0gInBjaS0wMDAwOjAwOjFmLjMtcGxhdGZvcm0tc2tsX2hkYV9kc3BfZ2Vu
ZXJpYyIKCQlub2RlLnBhdXNlLW9uLWlkbGUgPSAiZmFsc2UiCgkJZmFjdG9yeS5pZCA9ICIxOCIK
CQljbGllbnQuaWQgPSAiMzIiCgkJbm9kZS5kcml2ZXIgPSAidHJ1ZSIKCQlmYWN0b3J5Lm1vZGUg
PSAibWVyZ2UiCgkJYXVkaW8uYWRhcHQuZm9sbG93ZXIgPSAiIgoJCWxpYnJhcnkubmFtZSA9ICJh
dWRpb2NvbnZlcnQvbGlic3BhLWF1ZGlvY29udmVydCIKCQlvYmplY3QuaWQgPSAiNTUiCgkJbm9k
ZS5tYXgtbGF0ZW5jeSA9ICIyMDQ4LzQ4MDAwIgoJUG9ydHM6CgkJW091dF0gU3BlYWtlcjogU3Bl
YWtlciAodHlwZTogU3BlYWtlciwgcHJpb3JpdHk6IDEwMCwgYXZhaWxhYmlsaXR5IHVua25vd24p
CgkJW091dF0gSGVhZHBob25lczogSGVhZHBob25lcyAodHlwZTogSGVhZHBob25lcywgcHJpb3Jp
dHk6IDIwMCwgYXZhaWxhYmlsaXR5IGdyb3VwOiBIZWFkcGhvbmUsIG5vdCBhdmFpbGFibGUpCglB
Y3RpdmUgUG9ydDogW091dF0gU3BlYWtlcgoJRm9ybWF0czoKCQlwY20KClNpbmsgIzExNwoJU3Rh
dGU6IFNVU1BFTkRFRAoJTmFtZTogYWxzYV9vdXRwdXQudXNiLUhQX0hQX0RvY2tfQXVkaW9fRkZG
RkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYtMDAuYW5hbG9nLXN0ZXJlbwoJRGVzY3JpcHRp
b246IEhQIERvY2sgQXVkaW8gQW5hbG9nIFN0ZXJlbwoJRHJpdmVyOiBQaXBlV2lyZQoJU2FtcGxl
IFNwZWNpZmljYXRpb246IHMxNmxlIDJjaCA0ODAwMEh6CglDaGFubmVsIE1hcDogZnJvbnQtbGVm
dCxmcm9udC1yaWdodAoJT3duZXIgTW9kdWxlOiA0Mjk0OTY3Mjk1CglNdXRlOiBubwoJVm9sdW1l
OiBmcm9udC1sZWZ0OiA1MTU2MyAvICA3OSUgLyAtNi4yNSBkQiwgICBmcm9udC1yaWdodDogNTE1
NjMgLyAgNzklIC8gLTYuMjUgZEIKCSAgICAgICAgYmFsYW5jZSAwLjAwCglCYXNlIFZvbHVtZTog
NTQwOTQgLyAgODMlIC8gLTUuMDAgZEIKCU1vbml0b3IgU291cmNlOiBhbHNhX291dHB1dC51c2It
SFBfSFBfRG9ja19BdWRpb19GRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRi0wMC5hbmFs
b2ctc3RlcmVvLm1vbml0b3IKCUxhdGVuY3k6IDAgdXNlYywgY29uZmlndXJlZCAwIHVzZWMKCUZs
YWdzOiBIQVJEV0FSRSBIV19NVVRFX0NUUkwgSFdfVk9MVU1FX0NUUkwgREVDSUJFTF9WT0xVTUUg
TEFURU5DWSAKCVByb3BlcnRpZXM6CgkJb2JqZWN0LnBhdGggPSAiYWxzYTpwY206Mjpmcm9udDoy
OnBsYXliYWNrIgoJCWFwaS5hbHNhLnBhdGggPSAiZnJvbnQ6MiIKCQlhcGkuYWxzYS5wY20uY2Fy
ZCA9ICIyIgoJCWFwaS5hbHNhLnBjbS5zdHJlYW0gPSAicGxheWJhY2siCgkJYXVkaW8uY2hhbm5l
bHMgPSAiMiIKCQlhdWRpby5wb3NpdGlvbiA9ICJGTCxGUiIKCQlkZXZpY2Uucm91dGVzID0gIjEi
CgkJYWxzYS5yZXNvbHV0aW9uX2JpdHMgPSAiMTYiCgkJZGV2aWNlLmFwaSA9ICJhbHNhIgoJCWRl
dmljZS5jbGFzcyA9ICJzb3VuZCIKCQlhbHNhLmNsYXNzID0gImdlbmVyaWMiCgkJYWxzYS5zdWJj
bGFzcyA9ICJnZW5lcmljLW1peCIKCQlhbHNhLm5hbWUgPSAiVVNCIEF1ZGlvIgoJCWFsc2EuaWQg
PSAiVVNCIEF1ZGlvIgoJCWFsc2Euc3ViZGV2aWNlID0gIjAiCgkJYWxzYS5zdWJkZXZpY2VfbmFt
ZSA9ICJzdWJkZXZpY2UgIzAiCgkJYWxzYS5kZXZpY2UgPSAiMCIKCQlhbHNhLmNhcmQgPSAiMiIK
CQlhbHNhLmNhcmRfbmFtZSA9ICJIUCBEb2NrIEF1ZGlvIgoJCWFsc2EubG9uZ19jYXJkX25hbWUg
PSAiSFAgSFAgRG9jayBBdWRpbyBhdCB1c2ItMDAwMDowODowMC4wLTIsIGZ1bGwgc3BlZWQiCgkJ
YWxzYS5kcml2ZXJfbmFtZSA9ICJzbmRfdXNiX2F1ZGlvIgoJCWRldmljZS5wcm9maWxlLm5hbWUg
PSAiYW5hbG9nLXN0ZXJlbyIKCQlkZXZpY2UucHJvZmlsZS5kZXNjcmlwdGlvbiA9ICJBbmFsb2cg
U3RlcmVvIgoJCWNhcmQucHJvZmlsZS5kZXZpY2UgPSAiNCIKCQlkZXZpY2UuaWQgPSAiMjIzIgoJ
CWZhY3RvcnkubmFtZSA9ICJhcGkuYWxzYS5wY20uc2luayIKCQlwcmlvcml0eS5kcml2ZXIgPSAi
ODgxIgoJCXByaW9yaXR5LnNlc3Npb24gPSAiODgxIgoJCW1lZGlhLmNsYXNzID0gIkF1ZGlvL1Np
bmsiCgkJbm9kZS5uaWNrID0gIkhQIERvY2sgQXVkaW8iCgkJbm9kZS5uYW1lID0gImFsc2Ffb3V0
cHV0LnVzYi1IUF9IUF9Eb2NrX0F1ZGlvX0ZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZG
LTAwLmFuYWxvZy1zdGVyZW8iCgkJZGV2aWNlLmRlc2NyaXB0aW9uID0gIkhQIERvY2sgQXVkaW8g
QW5hbG9nIFN0ZXJlbyIKCQlkZXZpY2UuaWNvbl9uYW1lID0gImF1ZGlvLWNhcmQtYW5hbG9nIgoJ
CWRldmljZS5idXMgPSAidXNiIgoJCWRldmljZS5idXNfcGF0aCA9ICJwY2ktMDAwMDowODowMC4w
LXVzYi0wOjI6MS4wIgoJCW5vZGUucGF1c2Utb24taWRsZSA9ICJmYWxzZSIKCQlmYWN0b3J5Lmlk
ID0gIjE4IgoJCWNsaWVudC5pZCA9ICIzMiIKCQlub2RlLmRyaXZlciA9ICJ0cnVlIgoJCWZhY3Rv
cnkubW9kZSA9ICJtZXJnZSIKCQlhdWRpby5hZGFwdC5mb2xsb3dlciA9ICIiCgkJbGlicmFyeS5u
YW1lID0gImF1ZGlvY29udmVydC9saWJzcGEtYXVkaW9jb252ZXJ0IgoJCW9iamVjdC5pZCA9ICIx
MTciCglQb3J0czoKCQlhbmFsb2ctb3V0cHV0OiBBbmFsb2cgT3V0cHV0ICh0eXBlOiBBbmFsb2cs
IHByaW9yaXR5OiA5OTAwLCBhdmFpbGFiaWxpdHkgdW5rbm93bikKCUFjdGl2ZSBQb3J0OiBhbmFs
b2ctb3V0cHV0CglGb3JtYXRzOgoJCXBjbQoKU2luayAjNjEKCVN0YXRlOiBTVVNQRU5ERUQKCU5h
bWU6IGJsdWV6X291dHB1dC4wQ19BNl85NF9BMl9BMl8wRC5hMmRwLXNpbmsKCURlc2NyaXB0aW9u
OiBKQkwgQ2hhcmdlIDIKCURyaXZlcjogUGlwZVdpcmUKCVNhbXBsZSBTcGVjaWZpY2F0aW9uOiBz
MTZsZSAyY2ggNDgwMDBIegoJQ2hhbm5lbCBNYXA6IGZyb250LWxlZnQsZnJvbnQtcmlnaHQKCU93
bmVyIE1vZHVsZTogNDI5NDk2NzI5NQoJTXV0ZTogbm8KCVZvbHVtZTogZnJvbnQtbGVmdDogMjIw
NzEgLyAgMzQlIC8gLTI4LjM2IGRCLCAgIGZyb250LXJpZ2h0OiAyMjA3MSAvICAzNCUgLyAtMjgu
MzYgZEIKCSAgICAgICAgYmFsYW5jZSAwLjAwCglCYXNlIFZvbHVtZTogNjU1MzYgLyAxMDAlIC8g
MC4wMCBkQgoJTW9uaXRvciBTb3VyY2U6IGJsdWV6X291dHB1dC4wQ19BNl85NF9BMl9BMl8wRC5h
MmRwLXNpbmsubW9uaXRvcgoJTGF0ZW5jeTogMCB1c2VjLCBjb25maWd1cmVkIDAgdXNlYwoJRmxh
Z3M6IEhBUkRXQVJFIERFQ0lCRUxfVk9MVU1FIExBVEVOQ1kgCglQcm9wZXJ0aWVzOgoJCWFwaS5i
bHVlejUudHJhbnNwb3J0ID0gIiIKCQlhcGkuYmx1ZXo1LnByb2ZpbGUgPSAiYTJkcC1zaW5rIgoJ
CWFwaS5ibHVlejUuY29kZWMgPSAic2JjIgoJCWFwaS5ibHVlejUuYWRkcmVzcyA9ICIwQzpBNjo5
NDpBMjpBMjowRCIKCQlkZXZpY2Uucm91dGVzID0gIjEiCgkJY2FyZC5wcm9maWxlLmRldmljZSA9
ICIxIgoJCWRldmljZS5mb3JtX2ZhY3RvciA9ICJzcGVha2VyIgoJCWRldmljZS5idXMgPSAiYmx1
ZXRvb3RoIgoJCWRldmljZS5pZCA9ICIxNjIiCgkJZGV2aWNlLmRlc2NyaXB0aW9uID0gIkpCTCBD
aGFyZ2UgMiIKCQlub2RlLm5hbWUgPSAiYmx1ZXpfb3V0cHV0LjBDX0E2Xzk0X0EyX0EyXzBELmEy
ZHAtc2luayIKCQlmYWN0b3J5Lm5hbWUgPSAiYXBpLmJsdWV6NS5hMmRwLnNpbmsiCgkJcHJpb3Jp
dHkuZHJpdmVyID0gIjEwMTAiCgkJcHJpb3JpdHkuc2Vzc2lvbiA9ICIxMDEwIgoJCWRldmljZS5p
Y29uX25hbWUgPSAiYXVkaW8tc3BlYWtlcnMtYmx1ZXRvb3RoIgoJCW5vZGUucGF1c2Utb24taWRs
ZSA9ICJmYWxzZSIKCQlmYWN0b3J5LmlkID0gIjgiCgkJZGV2aWNlLmFwaSA9ICJibHVlejUiCgkJ
bWVkaWEuY2xhc3MgPSAiQXVkaW8vU2luayIKCQlub2RlLmRyaXZlciA9ICJ0cnVlIgoJCW5vZGUu
bGF0ZW5jeSA9ICI1MTIvNDgwMDAiCgkJZmFjdG9yeS5tb2RlID0gIm1lcmdlIgoJCWF1ZGlvLmFk
YXB0LmZvbGxvd2VyID0gIiIKCQlsaWJyYXJ5Lm5hbWUgPSAiYXVkaW9jb252ZXJ0L2xpYnNwYS1h
dWRpb2NvbnZlcnQiCgkJb2JqZWN0LmlkID0gIjYxIgoJCWNsaWVudC5pZCA9ICIzMSIKCVBvcnRz
OgoJCXNwZWFrZXItb3V0cHV0OiBTcGVha2VyICh0eXBlOiBTcGVha2VyLCBwcmlvcml0eTogMCwg
YXZhaWxhYmxlKQoJQWN0aXZlIFBvcnQ6IHNwZWFrZXItb3V0cHV0CglGb3JtYXRzOgoJCXBjbQo=
`
